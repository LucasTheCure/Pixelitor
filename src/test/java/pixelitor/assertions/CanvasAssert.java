/*
 * Copyright 2018 Laszlo Balazs-Csiki and Contributors
 *
 * This file is part of Pixelitor. Pixelitor is free software: you
 * can redistribute it and/or modify it under the terms of the GNU
 * General Public License, version 3 as published by the Free
 * Software Foundation.
 *
 * Pixelitor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Pixelitor. If not, see <http://www.gnu.org/licenses/>.
 */

package pixelitor.assertions;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;
import pixelitor.Canvas;

/**
 * Custom AssertJ assertions for {@link Canvas} objects.
 * Based partially on the code generated by CustomAssertionGenerator.
 */
public class CanvasAssert extends AbstractAssert<CanvasAssert, Canvas> {
    /**
     * Creates a new <code>{@link CanvasAssert}</code> to make assertions on actual Canvas.
     *
     * @param actual the Canvas we want to make assertions on.
     */
    public CanvasAssert(Canvas actual) {
        super(actual, CanvasAssert.class);
    }

    /**
     * Verifies that the actual Canvas's bounds is equal to the given one.
     *
     * @param bounds the given bounds to compare the actual Canvas's bounds to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Canvas's bounds is not equal to the given one.
     */
    public CanvasAssert hasImBounds(java.awt.Rectangle bounds) {
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting bounds of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.awt.Rectangle actualBounds = actual.getImBounds();
        if (!Objects.areEqual(actualBounds, bounds)) {
            failWithMessage(assertjErrorMessage, actual, bounds, actualBounds);
        }

        return this;
    }

    /**
     * Verifies that the actual Canvas's height is equal to the given one.
     *
     * @param height the given height to compare the actual Canvas's height to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Canvas's height is not equal to the given one.
     */
    public CanvasAssert hasImHeight(int height) {
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting height of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualHeight = actual.getImHeight();
        if (actualHeight != height) {
            failWithMessage(assertjErrorMessage, actual, height, actualHeight);
        }

        return this;
    }

    /**
     * Verifies that the actual Canvas's width is equal to the given one.
     *
     * @param width the given width to compare the actual Canvas's width to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Canvas's width is not equal to the given one.
     */
    public CanvasAssert hasImWidth(int width) {
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting width of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualWidth = actual.getImWidth();
        if (actualWidth != width) {
            failWithMessage(assertjErrorMessage, actual, width, actualWidth);
        }

        return this;
    }

    /**
     * Verifies that the actual Canvas's component space width is equal to the given one.
     */
    public CanvasAssert hasCoWidth(int coWidth) {
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting component space width of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualCoWidth = actual.getCoWidth();
        if (actualCoWidth != coWidth) {
            failWithMessage(assertjErrorMessage, actual, coWidth, actualCoWidth);
        }

        return this;
    }

    /**
     * Verifies that the actual Canvas's component space height is equal to the given one.
     */
    public CanvasAssert hasCoHeight(int coHeight) {
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting coHeight of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualCoHeight = actual.getCoHeight();
        if (actualCoHeight != coHeight) {
            failWithMessage(assertjErrorMessage, actual, coHeight, actualCoHeight);
        }

        return this;
    }

    /**
     * Verifies that the actual Canvas's component space size is equal to the given one.
     */
    public CanvasAssert hasCoSize(java.awt.Dimension coSize) {
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting coSize of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.awt.Dimension actualCoSize = actual.getCoSize();
        if (!Objects.areEqual(actualCoSize, coSize)) {
            failWithMessage(assertjErrorMessage, actual, coSize, actualCoSize);
        }

        return this;
    }
}
